#include "ezSfx_note.h"

typedef struct node_t {
	EZ_Note_t hd;
	struct node_t *tl;

} node_t;
static node_t* note_list_head = NULL;

static EZ_Sample_t (*note_mixer) (double time, int channel); 

void EZ_sfx_play(EZ_Note_t* note) {

	node_t* new = (node_t*) malloc(sizeof(node_t));

	new->hd = *note;
	new->hd.startTime = globalTime;
	new->hd.endTime   = globalTime + note->length;
	
	new->tl = note_list_head; note_list_head = new;

}


static EZ_Sample_t note_mixer(double time, int channel) {

	double sf = 0;
	int length = 0;

	node_t* current = note_list_head;
	node_t* last = NULL;


	while (current != NULL) {

		sf += current->hd.oscillator(time, current->hd.pitch) * 0.25;
		length ++;


		//REMOVE ELEMENT FROM LIST
		if (time >= current->hd.endTime) {

			if (last == NULL) //IF CURRENT IS THE HEAD THEN CHANGE THE HEAD
				note_list_head = current->tl;

			else //OTHERWISE, CHANGE THE PREVIOUS LINK
				last->tl  = current->tl;
	

			free(current);

		}
		else {
			last = current;
		}

		current = current->tl;
	}



	return (EZ_Sample_t)(sf*SAMPLE_MAX);
}

typedef struct node_t {
	EZ_Note_t hd;
	struct node_t *tl;

} node_t;
static node_t* note_list_head = NULL;


void EZ_sfx_play(EZ_Note_t* note) {

	node_t* new = (node_t*) malloc(sizeof(node_t));

	new->hd = *note;
	new->hd.startTime = globalTime;
	new->hd.endTime   = globalTime + note->length;
	
	new->tl = note_list_head; note_list_head = new;

}


static EZ_Sample_t note_mixer(double time, int channel) {

	double sf = 0;
	int length = 0;

	node_t* current = note_list_head;
	node_t* last = NULL;


	while (current != NULL) {

		sf += current->hd.oscillator(time, current->hd.pitch) * 0.25;
		length ++;


		//REMOVE ELEMENT FROM LIST
		if (time >= current->hd.endTime) {

			if (last == NULL) //IF CURRENT IS THE HEAD THEN CHANGE THE HEAD
				note_list_head = current->tl;

			else //OTHERWISE, CHANGE THE PREVIOUS LINK
				last->tl  = current->tl;
	

			free(current);

		}
		else {
			last = current;
		}

		current = current->tl;
	}



	return (EZ_Sample_t)(sf*SAMPLE_MAX);
}
